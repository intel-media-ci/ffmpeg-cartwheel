From 4e5fce5c6737702eddea1aa1e79a420a13c762d6 Mon Sep 17 00:00:00 2001
From: Linjie Fu <linjie.fu@intel.com>
Date: Mon, 11 May 2020 15:20:52 +0800
Subject: [PATCH 4/4] lavc/vaapi_encode_h265: add h265 tile encoding support

Default to enable uniform_spacing_flag. Guess level by the tile
rows/cols. Supported for ICL+ platforms.

Also add documentations.

To encode with 4 rows 2 columns:
    ffmpeg ... -c:v hevc_vaapi -tiles 4x2 ...
    ffmpeg ... -c:v hevc_vaapi -tile_rows 4 -tile_cols 2 ...

Suggested-by: Jun Zhao <mypopydev@gmail.com>
Signed-off-by: Linjie Fu <linjie.fu@intel.com>
---
 doc/encoders.texi              | 13 +++++++++++++
 libavcodec/vaapi_encode_h265.c | 38 +++++++++++++++++++++++++++++++++++++-
 2 files changed, 50 insertions(+), 1 deletion(-)

diff --git a/doc/encoders.texi b/doc/encoders.texi
index ef8435c..6b18fb4 100644
--- a/doc/encoders.texi
+++ b/doc/encoders.texi
@@ -3120,6 +3120,19 @@ Convert P-frames to low delay B-frames as references, while normal B frames
 still have 2 different ref_lists and allow bi-prediction.
 @end table
 
+@item tiles
+Set the number of tiles to encode the input video with, as rows x columns.
+Larger numbers allow greater parallelism in both encoding and decoding, but
+may decrease coding efficiency.
+
+@item tile_rows
+Selects how many rows of tiles to encode with. For example, 4 tile rows would
+be requested by setting the tile_rows option to 4.
+
+@item tile_cols
+Selects how many columns of tiles to encode with. For example, 5 tile columns
+would be requested by setting the tile_cols option to 5.
+
 @end table
 
 @end table
diff --git a/libavcodec/vaapi_encode_h265.c b/libavcodec/vaapi_encode_h265.c
index 8738f11..af70642 100644
--- a/libavcodec/vaapi_encode_h265.c
+++ b/libavcodec/vaapi_encode_h265.c
@@ -64,6 +64,9 @@ typedef struct VAAPIEncodeH265Context {
     int sei;
     int b_frame_strategy;
 
+    int trows;
+    int tcols;
+
     // Derived settings.
     int fixed_qp_idr;
     int fixed_qp_p;
@@ -346,7 +349,7 @@ static int vaapi_encode_h265_init_sequence_params(AVCodecContext *avctx)
 
         level = ff_h265_guess_level(ptl, avctx->bit_rate,
                                     ctx->surface_width, ctx->surface_height,
-                                    ctx->nb_slices, 1, 1,
+                                    ctx->nb_slices, ctx->tile_rows, ctx->tile_cols,
                                     (ctx->b_per_p > 0) + 1);
         if (level) {
             av_log(avctx, AV_LOG_VERBOSE, "Using level %s.\n", level->name);
@@ -565,6 +568,20 @@ static int vaapi_encode_h265_init_sequence_params(AVCodecContext *avctx)
 
     pps->pps_loop_filter_across_slices_enabled_flag = 1;
 
+    if (ctx->tile_rows && ctx->tile_cols) {
+        pps->tiles_enabled_flag         = 1;
+        pps->uniform_spacing_flag       = 1;
+
+        pps->num_tile_rows_minus1       = ctx->tile_rows - 1;
+        pps->num_tile_columns_minus1    = ctx->tile_cols - 1;
+
+        pps->loop_filter_across_tiles_enabled_flag = 1;
+
+        for (i = 0; i <= pps->num_tile_rows_minus1; i++)
+            pps->row_height_minus1[i]   = ctx->row_height[i] - 1;
+        for (i = 0; i <= pps->num_tile_columns_minus1; i++)
+            pps->column_width_minus1[i] = ctx->col_width[i] - 1;
+    }
 
     // Fill VAAPI parameter buffers.
 
@@ -673,6 +690,13 @@ static int vaapi_encode_h265_init_sequence_params(AVCodecContext *avctx)
         },
     };
 
+    if (pps->tiles_enabled_flag) {
+        for (i = 0; i <= vpic->num_tile_rows_minus1; i++)
+            vpic->row_height_minus1[i]   = pps->row_height_minus1[i];
+        for (i = 0; i <= vpic->num_tile_columns_minus1; i++)
+            vpic->column_width_minus1[i] = pps->column_width_minus1[i];
+    }
+
     return 0;
 }
 
@@ -1208,6 +1232,11 @@ static av_cold int vaapi_encode_h265_init(AVCodecContext *avctx)
     if (priv->qp > 0)
         ctx->explicit_qp = priv->qp;
 
+    if (priv->trows && priv->tcols) {
+        ctx->tile_rows = priv->trows;
+        ctx->tile_cols = priv->tcols;
+    }
+
     // Low delay B-frames is required for low power encoding.
     if (ctx->low_power && priv->b_frame_strategy != 1) {
         priv->b_frame_strategy = 1;
@@ -1307,6 +1336,13 @@ static const AVOption vaapi_encode_h265_options[] = {
         { "ref_b",       "Only convert P-frames to low delay B-frames as references",
                           0, AV_OPT_TYPE_CONST, { .i64 = 2 }, INT_MIN, INT_MAX, FLAGS, "b_strategy" },
 
+    { "tiles", "Tile rows x cols",
+      OFFSET(trows), AV_OPT_TYPE_IMAGE_SIZE, { .str = NULL }, 0, 0, FLAGS },
+    { "tile_rows", "Number of rows for tile encoding",
+      OFFSET(trows), AV_OPT_TYPE_INT, { .i64 = 0 }, 0, INT_MAX, FLAGS },
+    { "tile_cols", "Number of cols for tile encoding",
+      OFFSET(tcols), AV_OPT_TYPE_INT, { .i64 = 0 }, 0, INT_MAX, FLAGS },
+
     { NULL },
 };
 
-- 
2.7.4

